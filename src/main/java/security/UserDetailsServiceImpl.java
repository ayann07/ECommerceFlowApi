package security;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import modules.user.repositories.UserRepository;

@Service
// This is a Spring Framework annotation.

// Its job is to tell Spring that this class is a "Service" component. When
// Spring starts your application, it scans your project for classes with
// annotations like @Service, @Component, @Repository, etc.

// When it finds one, it creates an instance of that class (called a bean) and
// holds it in its container. This makes the class available to be automatically
// injected into other parts of your application.
@RequiredArgsConstructor
// inject dependencies in Spring, known as constructor injection

// Full Flow how it works:
// Spring sees @Service on UserDetailsServiceImpl and knows it needs to create a
// bean of this class.

// To create the bean, Spring looks for a constructor. It finds the one
// generated by @RequiredArgsConstructor.

// Spring sees that the constructor requires a UserRepository bean. It finds the
// UserRepository bean in its container and "injects" it as an argument.

// The UserDetailsServiceImpl bean is successfully created with its required
// dependency.
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;

    /**
     * This method is called by Spring Security to fetch the user details.
     * 
     * @param username The email of the user trying to authenticate.
     * @return A UserDetails object (our UserModel) that Spring Security can use.
     * @throws UsernameNotFoundException if no user is found with the given email.
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByEmail(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email" + username));
    }

}